#!/usr/bin/env node

var fs = require('fs');
var url = require('url');
var util = require('util');
var path = require('path');
var tilelive = require('../');
var progress = require('progress-stream');

var argv = require('minimist')(process.argv.slice(2), {
    alias: {
        s: 'scheme',
        l: 'list',
        c: 'concurrency',
        b: 'bounds',
        bbox: 'bounds'
    }
});

if (!argv._[0]) {
    console.log('Usage:');
    console.log('  tilelive-copy <src> [dst]');
    console.log('');
    console.log('Example:');
    console.log('  tilelive-copy orig.mbtiles copy.mbtiles');
    console.log('');
    console.log('Options:');
    console.log('  --scheme=[scanline,pyramid,list]  Default: scanline.');
    console.log('  --list=[filepath]                 Filepath if scheme is list.');
    console.log('  --concurrency=[number]            Control on the number of pending I/O operations with the underlying source during copy. Note: this is not CPU concurrency, which is handled by individual plugins typically by setting UV_THREADPOOL_SIZE=[number] as an environment variable.');
    console.log('  --withoutprogress                 Shows progress by default.');
    console.log('  --timeout=[number]                Timeout after n ms of inactivity.');
    console.log('  --slow=[number]                   Warn on slow tiles.');
    console.log('  --exit                            Exit explicitly when copy is complete.');
    console.log('  --bounds=[w,s,e,n]');
    console.log('  --minzoom=[number]');
    console.log('  --maxzoom=[number]');
    console.log('  --parts=[number]');
    console.log('  --part=[number]');
    console.log('  --retry=[number]');
    process.exit(1);
}

argv.scheme = argv.scheme || 'scanline';
argv.list = argv.list || undefined;
argv.concurrency = argv.concurrency !== undefined ? parseInt(argv.concurrency,10) : undefined;
argv.bounds = argv.bounds !== undefined ? argv.bounds.split(',').map(function(v) { return parseFloat(v); }) : undefined;
argv.minzoom = argv.minzoom !== undefined ? parseInt(argv.minzoom,10) : undefined;
argv.maxzoom = argv.maxzoom !== undefined ? parseInt(argv.maxzoom,10) : undefined;
argv.withoutprogress = argv.withoutprogress ? true : false;
argv.parts = isNumeric(argv.parts) ? argv.parts : undefined;
argv.part = isNumeric(argv.part) ? argv.part : undefined;
argv.retry = isNumeric(argv.retry) ? parseInt(argv.retry,10) : undefined;
argv.timeout = isNumeric(argv.timeout) ? parseInt(argv.timeout,10) : undefined;
argv.slow = isNumeric(argv.slow) ? parseInt(argv.slow,10) : undefined;
argv.exit = argv.exit || undefined;

if (argv.scheme !== 'pyramid' && argv.scheme !== 'scanline' && argv.scheme !== 'list') {
    console.warn('scheme must be one of pyramid, scanline, list');
    process.exit(1);
}

var srcuri = argv._[0];
var dsturi = argv._[1] ? argv._[1] : false;
// register modules
tilelive.auto(srcuri);
if (dsturi) tilelive.auto(dsturi);

copy();

function copy() {
    var options = {
        type:argv.scheme,
        minzoom:argv.minzoom,
        maxzoom:argv.maxzoom,
        bounds:argv.bounds,
        retry:argv.retry,
        slow:argv.slow,
        timeout:argv.timeout,
        close:true
    };

    if (!argv.withoutprogress && dsturi) options.progress = report;
    if (argv.concurrency) options.concurrency = argv.concurrency;
    if (isNumeric(argv.part) && isNumeric(argv.parts)) options.job = {
        total:argv.parts,
        num:argv.part
    };
    // Create readstream for lists
    if (options.type === 'list' && argv.list) {
        options.listStream = fs.createReadStream(argv.list);
    }
    if (!dsturi) options.outStream = process.stdout;

    if (options.slow) options.onslow = function(method, z, x, y, time) {
        console.warn('[slow tile] %s %d/%d/%d %dms', method, z, x, y, time);
    };

    tilelive.copy(srcuri, dsturi, options, function(err) {
        if (err) throw err;
        console.log('');
        if (argv.exit) process.exit(0);
    });
}

function report(stats, p) {
    process.stdout.write(util.format('\r\033[K[%s] %s%% %s/%s @ %s/s | ✓ %s □ %s | %s left',
        pad(formatDuration(process.uptime()), 4, true),
        pad((p.percentage).toFixed(4), 8, true),
        pad(formatNumber(p.transferred),6,true),
        pad(formatNumber(p.length),6,true),
        pad(formatNumber(p.speed),4,true),
        formatNumber(stats.done - stats.skipped),
        formatNumber(stats.skipped),
        formatDuration(p.eta)
    ));
}

function formatDuration(duration) {
    var seconds = duration % 60;
    duration -= seconds;
    var minutes = (duration % 3600) / 60;
    duration -= minutes * 60;
    var hours = (duration % 86400) / 3600;
    duration -= hours * 3600;
    var days = duration / 86400;

    return (days > 0 ? days + 'd ' : '') +
        (hours > 0 || days > 0 ? hours + 'h ' : '') +
        (minutes > 0 || hours > 0 || days > 0 ? minutes + 'm ' : '') +
        seconds.toFixed(1) + 's';
}

function pad(str, len, r) {
    while (str.length < len) str = r ? ' ' + str : str + ' ';
    return str;
}

function formatNumber(num) {
    num = num || 0;
    if (num >= 1e6) {
        return (num / 1e6).toFixed(2) + 'm';
    } else if (num >= 1e3) {
        return (num / 1e3).toFixed(1) + 'k';
    } else {
        return num.toFixed(0);
    }
    return num.join('.');
}

function timeRemaining(progress) {
    return Math.floor(
        (process.uptime()) * (1 / progress) -
        (process.uptime())
    );
}

function isNumeric(num) {
    return !isNaN(parseFloat(num));
}
